#!/usr/bin/python
# Env: python3
# Rewrite by afei_0and1

'''
29、字符串解码
    现在规定，英文字母的A-Z使用数字1-26进行转换。现在输入一个数字字符串，尝试将其所有可能解码的结果返回。例如：
输入：13，返回["AC", "M"]。因为可以将1和3分别进行转换，也可以将13组合进行转换。
解题思路：
（1）定义一个映射表，用来将数字解码成指定的字符；
（2）定义一个递归函数，对传入其中的字符串进行处理。当前要处理的字符串如果以0开头，则无法进行解码，直接返回空列表
。当前要处理的字符串转成整数如果小于11，则只有一种解码方式，将其解码放入列表返回；
（3）当前要处理的字符串转成整数如果大于10且小于27，则需要做判定逻辑：如果字符以”0“结尾，则只有一种解码方式，解码
后将其放入列表返回，如果字符串以非”0“结尾，则有两种解码方式（两个字符串单独解码和组合解码），将转码结果放入列表
返回；
（4）当前要处理的字符串转成整数如果大于26且小于100，则需要判定其末尾是否是字符”0“，如果是，则无法解码，直接返回
空列表，如果不是，则只有一种解码方式（两个字符单独解码），解码后放入列表返回；
（5）以上情况都不满足，则表明当前字符串转成整数后的数值是三位以上的数。需要进行递归运算，在递归时，有两种场景可以
决策，即当前字符串第一个字符单独解码后递归和将当前字符串前两个字符组合后递归。
'''

#建立数字和字符的映射
chars = ["", "a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "n",
         "o", "p", "q", "r", "s", "t", "u", "v", "w", "x", "y", "z"]

def stringDecode(s):
    #字符串以0开头或空字符串情况
    if len(s) == 0 or s[0] == "0":
        return []
    num = int(s)
    #小于11的情况
    if num <= 10:
        return [chars[num]]
    #大于10小于27的情况
    if num <= 26:
        if s[1] == "0":
            #如果第二位为0的情况
            return [chars[num]]
        else:
            #不为0有两种解码方式
            return [chars[int(s[0])] + chars[int(s[1])], chars[num]]
    #大于26小于100的情况
    if num <= 99:
        if s[1] == "0":
            return []
        else:
            return [chars[int(s[0])] + chars[int(s[1])]]
    res = []
    #递归决策
    if int(s[:2]) <= 26:
        tmp = stringDecode(s[2:])
        #当前字符串前两个字符组合解码
        for i in tmp:
            res.append(chars[int(s[:2])] + i)
        #第一个字符单独解码
        tmp2 = stringDecode(s[1:])
        for i in tmp2:
            res.append(chars[int(s[0])] + i)
        return res

print(stringDecode("199"))
'''
Output result：
    ['si', 'aii']
'''