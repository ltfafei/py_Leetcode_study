#!/usr/bin/python3
#-*- coding: UTF-8 -*-
#Author: afei00123

'''
8、灯泡问题
    现在一个房间中排列着n盏灯，可以通过以下动作控制这些灯的开关：
（1）第一次动作将会把所有灯都打开；
（2）第二次动作将偶数位置的灯进行关闭（灯的位置从1开始计数）；
（3）第i次动作将对所有i的倍数位置的灯的开关状态进行切换；
（4）第n次动作时，会将最后一盏灯的开关状态进行切换。
    所以，房间有多少栈灯，就将进行多少次动作。现在要求编程解决该问题。输入房间的灯数n，返回所有
动作做完后还亮着的灯有多少栈？
解题思路：
    最直接的解法就是按照题目要求对灯泡进行操作，最后将亮着的灯的数量返回。可以定义一个有n个元素
的列表，每个元素使用Ture和False来记录状态。
'''

def lampBulb_1(n):
    if n == 0:
        return 0
    #初始状态将所有灯打开
    L = [True] * n
    i = 2  #偶数步长记录
    #每轮操作后，将对应位置的灯进行切换
    while i <= n:
        if i == n:
            L[-1] = not L[-1]
            break
        for index in range(i-1, n, i):
            L[index] = not L[index]
        i += 1
    count = 0
    #将所有亮着的灯进行个数统计
    for item in L:
        if item:
            count += 1
    return count

print(lampBulb_1(10))
'''
Output result：
    3
'''

'''
优化程序：
    上面的程序实现没有问题，但存在多余的冗余操作。比如偶数栈灯，如第2栈灯，第二次操作会
关闭，当为2的倍数操作时又会打开。所以一盏灯的开关状态与操作的次数有关。对于一盏灯而言，
如果被操作了奇数次，那它最终的状态一定是开着的，如果被操作了偶数次，则它的状态一定是关闭的。
    而一盏灯会被操作多少次，与其位置有很大关系。比如：第4盏灯在第1，2，4轮操作动作时会被
操作，所以一盏灯所在位置index有多少个因数，其实际就会被操作多少次。所以可以将问题转换成：
需要寻找1-n之间有多少个数的因数有偶数个。
数学原理：如果一个数的因数有奇数个，则其一定是完全平方数。
所以，最终求得是：1-n之间有多少个完全平方数。
'''

import math

def lampBulb_2(n):
    count = 0
    for i in range(int(math.sqrt(n))):
        if i * i <= n:
            count += 1
    return count

print(lampBulb_2(10))
'''
Output result：
    3
'''